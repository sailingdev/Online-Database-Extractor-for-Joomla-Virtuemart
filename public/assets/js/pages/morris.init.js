/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 44);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/pages/morris.init.js":
/*!*******************************************!*\
  !*** ./resources/js/pages/morris.init.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\nTemplate Name: Ubold - Responsive Bootstrap 4 Admin Dashboard\nAuthor: CoderThemes\nWebsite: https://coderthemes.com/\nContact: support@coderthemes.com\nFile: Morris charts init js\n*/\n!function ($) {\n  \"use strict\";\n\n  var MorrisCharts = function MorrisCharts() {}; //creates Stacked chart\n\n\n  MorrisCharts.prototype.createStackedChart = function (element, data, xkey, ykeys, labels, lineColors) {\n    Morris.Bar({\n      element: element,\n      data: data,\n      xkey: xkey,\n      ykeys: ykeys,\n      stacked: true,\n      labels: labels,\n      hideHover: 'auto',\n      dataLabels: false,\n      resize: true,\n      //defaulted to true\n      gridLineColor: 'rgba(65, 80, 95, 0.07)',\n      barColors: lineColors\n    });\n  }, //creates area chart\n  MorrisCharts.prototype.createAreaChart = function (element, pointSize, lineWidth, data, xkey, ykeys, labels, opacity, lineColors) {\n    Morris.Area({\n      element: element,\n      pointSize: pointSize,\n      lineWidth: lineWidth,\n      data: data,\n      xkey: xkey,\n      dataLabels: false,\n      ykeys: ykeys,\n      labels: labels,\n      fillOpacity: opacity,\n      hideHover: 'auto',\n      resize: true,\n      gridLineColor: 'rgba(65, 80, 95, 0.07)',\n      lineColors: lineColors\n    });\n  }, //creates line chart\n  MorrisCharts.prototype.createLineChart = function (element, data, xkey, ykeys, labels, opacity, Pfillcolor, Pstockcolor, lineColors) {\n    Morris.Line({\n      element: element,\n      data: data,\n      dataLabels: false,\n      xkey: xkey,\n      ykeys: ykeys,\n      labels: labels,\n      fillOpacity: opacity,\n      pointFillColors: Pfillcolor,\n      pointStrokeColors: Pstockcolor,\n      behaveLikeLine: true,\n      gridLineColor: 'rgba(65, 80, 95, 0.07)',\n      hideHover: 'auto',\n      lineWidth: '3px',\n      pointSize: 0,\n      preUnits: '$',\n      resize: true,\n      //defaulted to true\n      lineColors: lineColors\n    });\n  }, //creates Bar chart\n  MorrisCharts.prototype.createBarChart = function (element, data, xkey, ykeys, labels, lineColors) {\n    Morris.Bar({\n      element: element,\n      data: data,\n      dataLabels: false,\n      xkey: xkey,\n      ykeys: ykeys,\n      labels: labels,\n      hideHover: 'auto',\n      resize: true,\n      //defaulted to true\n      gridLineColor: 'rgba(65, 80, 95, 0.07)',\n      barSizeRatio: 0.4,\n      xLabelAngle: 35,\n      barColors: lineColors\n    });\n  }, //creates area chart with dotted\n  MorrisCharts.prototype.createAreaChartDotted = function (element, pointSize, lineWidth, data, xkey, ykeys, labels, Pfillcolor, Pstockcolor, lineColors) {\n    Morris.Area({\n      element: element,\n      pointSize: 3,\n      lineWidth: 1,\n      data: data,\n      dataLabels: false,\n      xkey: xkey,\n      ykeys: ykeys,\n      labels: labels,\n      hideHover: 'auto',\n      pointFillColors: Pfillcolor,\n      pointStrokeColors: Pstockcolor,\n      resize: true,\n      smooth: false,\n      behaveLikeLine: true,\n      fillOpacity: 0.4,\n      gridLineColor: 'rgba(65, 80, 95, 0.07)',\n      lineColors: lineColors\n    });\n  }, //creates Donut chart\n  MorrisCharts.prototype.createDonutChart = function (element, data, colors) {\n    Morris.Donut({\n      element: element,\n      data: data,\n      barSize: 0.2,\n      resize: true,\n      //defaulted to true\n      colors: colors,\n      backgroundColor: 'transparent'\n    });\n  }, MorrisCharts.prototype.init = function () {\n    //creating Stacked chart\n    var $stckedData = [{\n      y: '2007',\n      a: 45,\n      b: 180,\n      c: 100\n    }, {\n      y: '2008',\n      a: 75,\n      b: 65,\n      c: 80\n    }, {\n      y: '2009',\n      a: 100,\n      b: 90,\n      c: 56\n    }, {\n      y: '2010',\n      a: 75,\n      b: 65,\n      c: 89\n    }, {\n      y: '2011',\n      a: 100,\n      b: 90,\n      c: 120\n    }, {\n      y: '2012',\n      a: 75,\n      b: 65,\n      c: 110\n    }, {\n      y: '2013',\n      a: 50,\n      b: 40,\n      c: 85\n    }, {\n      y: '2014',\n      a: 75,\n      b: 65,\n      c: 52\n    }, {\n      y: '2015',\n      a: 50,\n      b: 40,\n      c: 77\n    }, {\n      y: '2016',\n      a: 75,\n      b: 65,\n      c: 90\n    }, {\n      y: '2017',\n      a: 100,\n      b: 90,\n      c: 130\n    }, {\n      y: '2018',\n      a: 80,\n      b: 65,\n      c: 95\n    }];\n    var colors = ['#4a81d4', '#4fc6e1', '#e3eaef'];\n    var dataColors = $(\"#morris-bar-stacked\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    this.createStackedChart('morris-bar-stacked', $stckedData, 'y', ['a', 'b', 'c'], [\"Bitcoin\", \"Ethereum\", \"Litecoin\"], colors); //creating area chart\n\n    var $areaData = [{\n      y: '2012',\n      a: 10,\n      b: 20\n    }, {\n      y: '2013',\n      a: 75,\n      b: 65\n    }, {\n      y: '2014',\n      a: 50,\n      b: 40\n    }, {\n      y: '2015',\n      a: 75,\n      b: 65\n    }, {\n      y: '2016',\n      a: 50,\n      b: 40\n    }, {\n      y: '2017',\n      a: 75,\n      b: 65\n    }, {\n      y: '2018',\n      a: 90,\n      b: 60\n    }];\n    var colors = ['#4a81d4', \"#f1556c\"];\n    var dataColors = $(\"#morris-area-example\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    this.createAreaChart('morris-area-example', 0, 0, $areaData, 'y', ['a', 'b'], [\"Bitcoin\", \"Ethereum\"], ['1'], colors); //create line chart\n\n    var $data = [{\n      y: '2010',\n      a: 50,\n      b: 0\n    }, {\n      y: '2011',\n      a: 75,\n      b: 50\n    }, {\n      y: '2012',\n      a: 30,\n      b: 80\n    }, {\n      y: '2013',\n      a: 50,\n      b: 50\n    }, {\n      y: '2014',\n      a: 75,\n      b: 10\n    }, {\n      y: '2015',\n      a: 50,\n      b: 40\n    }, {\n      y: '2016',\n      a: 75,\n      b: 50\n    }, {\n      y: '2017',\n      a: 100,\n      b: 70\n    }];\n    var colors = ['#4a81d4', '#f672a7'];\n    var dataColors = $(\"#morris-line-example\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    this.createLineChart('morris-line-example', $data, 'y', ['a', 'b'], [\"Bitcoin\", \"Ethereum\"], ['0.1'], ['#ffffff'], ['#999999'], colors); //creating bar chart\n\n    var $barData = [{\n      y: '2012',\n      a: 100,\n      b: 90,\n      c: 40\n    }, {\n      y: '2013',\n      a: 75,\n      b: 65,\n      c: 20\n    }, {\n      y: '2014',\n      a: 50,\n      b: 40,\n      c: 50\n    }, {\n      y: '2015',\n      a: 75,\n      b: 65,\n      c: 95\n    }, {\n      y: '2016',\n      a: 50,\n      b: 40,\n      c: 22\n    }, {\n      y: '2017',\n      a: 75,\n      b: 65,\n      c: 56\n    }, {\n      y: '2018',\n      a: 100,\n      b: 90,\n      c: 60\n    }];\n    var colors = ['#02c0ce', '#0acf97', '#ebeff2'];\n    var dataColors = $(\"#morris-bar-example\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    this.createBarChart('morris-bar-example', $barData, 'y', ['a', 'b', 'c'], [\"Bitcoin\", \"Ethereum\", \"Litecoin\"], colors); //creating area chart with dotted\n\n    var $areaDotData = [{\n      y: '2012',\n      a: 10,\n      b: 20\n    }, {\n      y: '2013',\n      a: 75,\n      b: 65\n    }, {\n      y: '2014',\n      a: 50,\n      b: 40\n    }, {\n      y: '2015',\n      a: 75,\n      b: 65\n    }, {\n      y: '2016',\n      a: 50,\n      b: 40\n    }, {\n      y: '2017',\n      a: 75,\n      b: 65\n    }, {\n      y: '2018',\n      a: 90,\n      b: 60\n    }];\n    var colors = ['#e3eaef', \"#6658dd\"];\n    var dataColors = $(\"#morris-area-with-dotted\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    this.createAreaChartDotted('morris-area-with-dotted', 0, 0, $areaDotData, 'y', ['a', 'b'], [\"Bitcoin\", \"Litecoin\"], ['#ffffff'], ['#999999'], colors); //creating donut chart\n\n    var $donutData = [{\n      label: \"Ethereum\",\n      value: 12\n    }, {\n      label: \"Bitcoin\",\n      value: 30\n    }, {\n      label: \"Litecoin\",\n      value: 20\n    }];\n    var colors = ['#4fc6e1', '#6658dd', '#ebeff2'];\n    var dataColors = $(\"#morris-donut-example\").data('colors');\n\n    if (dataColors) {\n      colors = dataColors.split(\",\");\n    }\n\n    this.createDonutChart('morris-donut-example', $donutData, colors);\n  }, //init\n  $.MorrisCharts = new MorrisCharts(), $.MorrisCharts.Constructor = MorrisCharts;\n}(window.jQuery), //initializing \nfunction ($) {\n  \"use strict\";\n\n  $.MorrisCharts.init();\n}(window.jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/morris.init.js\n");

/***/ }),

/***/ 44:
/*!*************************************************!*\
  !*** multi ./resources/js/pages/morris.init.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/nikhil/workspace/themes/Ubold/ubold/laravel/laravel/resources/js/pages/morris.init.js */"./resources/js/pages/morris.init.js");


/***/ })

/******/ });