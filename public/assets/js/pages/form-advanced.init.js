/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 24);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/pages/form-advanced.init.js":
/*!**************************************************!*\
  !*** ./resources/js/pages/form-advanced.init.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\nTemplate Name: Ubold - Responsive Bootstrap 4 Admin Dashboard\nAuthor: CoderThemes\nWebsite: https://coderthemes.com/\nContact: support@coderthemes.com\nFile: Form advanced init js\n*/\n!function ($) {\n  \"use strict\";\n\n  var FormAdvanced = function FormAdvanced() {}; //initializing tooltip\n\n\n  FormAdvanced.prototype.initSelect2 = function () {\n    // Select2\n    $('[data-toggle=\"select2\"]').select2();\n  }, //initializing popover\n  //Max Length\n  FormAdvanced.prototype.initMaxLength = function () {\n    //Bootstrap-MaxLength\n    $('input#defaultconfig').maxlength({\n      warningClass: \"badge badge-success\",\n      limitReachedClass: \"badge badge-danger\"\n    });\n    $('input#thresholdconfig').maxlength({\n      threshold: 20,\n      warningClass: \"badge badge-success\",\n      limitReachedClass: \"badge badge-danger\"\n    });\n    $('input#alloptions').maxlength({\n      alwaysShow: true,\n      separator: ' out of ',\n      preText: 'You typed ',\n      postText: ' chars available.',\n      validate: true,\n      warningClass: \"badge badge-success\",\n      limitReachedClass: \"badge badge-danger\"\n    });\n    $('textarea#textarea').maxlength({\n      alwaysShow: true,\n      warningClass: \"badge badge-success\",\n      limitReachedClass: \"badge badge-danger\"\n    });\n    $('input#placement').maxlength({\n      alwaysShow: true,\n      placement: 'top-left',\n      warningClass: \"badge badge-success\",\n      limitReachedClass: \"badge badge-danger\"\n    });\n  }, //initializing Custom Select\n  FormAdvanced.prototype.initSelectize = function () {\n    $('#selectize-tags').selectize({\n      persist: false,\n      createOnBlur: true,\n      create: true\n    });\n    $('#selectize-select').selectize({\n      create: true,\n      sortField: {\n        field: 'text',\n        direction: 'asc'\n      },\n      dropdownParent: 'body'\n    });\n    $('#selectize-maximum').selectize({\n      maxItems: 3\n    });\n    $('#selectize-links').selectize({\n      theme: 'links',\n      maxItems: null,\n      valueField: 'id',\n      searchField: 'title',\n      options: [{\n        id: 1,\n        title: 'Coderthemes',\n        url: 'https://coderthemes.com/'\n      }, {\n        id: 2,\n        title: 'Google',\n        url: 'http://google.com'\n      }, {\n        id: 3,\n        title: 'Yahoo',\n        url: 'http://yahoo.com'\n      }],\n      render: {\n        option: function option(data, escape) {\n          return '<div class=\"option\">' + '<span class=\"title\">' + escape(data.title) + '</span>' + '<span class=\"url\">' + escape(data.url) + '</span>' + '</div>';\n        },\n        item: function item(data, escape) {\n          return '<div class=\"item\"><a href=\"' + escape(data.url) + '\">' + escape(data.title) + '</a></div>';\n        }\n      },\n      create: function create(input) {\n        return {\n          id: 0,\n          title: input,\n          url: '#'\n        };\n      }\n    });\n    $('#selectize-confirm').selectize({\n      delimiter: ',',\n      persist: false,\n      onDelete: function onDelete(values) {\n        return confirm(values.length > 1 ? 'Are you sure you want to remove these ' + values.length + ' items?' : 'Are you sure you want to remove \"' + values[0] + '\"?');\n      }\n    });\n    $('#selectize-optgroup').selectize({\n      sortField: 'text'\n    });\n    $('#selectize-programmatic').selectize({\n      options: [{\n        \"class\": 'mammal',\n        value: \"dog\",\n        name: \"Dog\"\n      }, {\n        \"class\": 'mammal',\n        value: \"cat\",\n        name: \"Cat\"\n      }, {\n        \"class\": 'mammal',\n        value: \"horse\",\n        name: \"Horse\"\n      }, {\n        \"class\": 'mammal',\n        value: \"kangaroo\",\n        name: \"Kangaroo\"\n      }, {\n        \"class\": 'bird',\n        value: 'duck',\n        name: 'Duck'\n      }, {\n        \"class\": 'bird',\n        value: 'chicken',\n        name: 'Chicken'\n      }, {\n        \"class\": 'bird',\n        value: 'ostrich',\n        name: 'Ostrich'\n      }, {\n        \"class\": 'bird',\n        value: 'seagull',\n        name: 'Seagull'\n      }, {\n        \"class\": 'reptile',\n        value: 'snake',\n        name: 'Snake'\n      }, {\n        \"class\": 'reptile',\n        value: 'lizard',\n        name: 'Lizard'\n      }, {\n        \"class\": 'reptile',\n        value: 'alligator',\n        name: 'Alligator'\n      }, {\n        \"class\": 'reptile',\n        value: 'turtle',\n        name: 'Turtle'\n      }],\n      optgroups: [{\n        value: 'mammal',\n        label: 'Mammal',\n        label_scientific: 'Mammalia'\n      }, {\n        value: 'bird',\n        label: 'Bird',\n        label_scientific: 'Aves'\n      }, {\n        value: 'reptile',\n        label: 'Reptile',\n        label_scientific: 'Reptilia'\n      }],\n      optgroupField: 'class',\n      labelField: 'name',\n      searchField: ['name'],\n      render: {\n        optgroup_header: function optgroup_header(data, escape) {\n          return '<div class=\"optgroup-header\">' + escape(data.label) + ' <span class=\"scientific\">(' + escape(data.label_scientific) + ')</span></div>';\n        }\n      }\n    });\n    $(\"#selectize-optgroup-column\").selectize({\n      options: [{\n        id: 'avenger',\n        make: 'dodge',\n        model: 'Avenger'\n      }, {\n        id: 'caliber',\n        make: 'dodge',\n        model: 'Caliber'\n      }, {\n        id: 'caravan-grand-passenger',\n        make: 'dodge',\n        model: 'Caravan Grand Passenger'\n      }, {\n        id: 'challenger',\n        make: 'dodge',\n        model: 'Challenger'\n      }, {\n        id: 'ram-1500',\n        make: 'dodge',\n        model: 'Ram 1500'\n      }, {\n        id: 'viper',\n        make: 'dodge',\n        model: 'Viper'\n      }, {\n        id: 'a3',\n        make: 'audi',\n        model: 'A3'\n      }, {\n        id: 'a6',\n        make: 'audi',\n        model: 'A6'\n      }, {\n        id: 'r8',\n        make: 'audi',\n        model: 'R8'\n      }, {\n        id: 'rs-4',\n        make: 'audi',\n        model: 'RS 4'\n      }, {\n        id: 's4',\n        make: 'audi',\n        model: 'S4'\n      }, {\n        id: 's8',\n        make: 'audi',\n        model: 'S8'\n      }, {\n        id: 'tt',\n        make: 'audi',\n        model: 'TT'\n      }, {\n        id: 'avalanche',\n        make: 'chevrolet',\n        model: 'Avalanche'\n      }, {\n        id: 'aveo',\n        make: 'chevrolet',\n        model: 'Aveo'\n      }, {\n        id: 'cobalt',\n        make: 'chevrolet',\n        model: 'Cobalt'\n      }, {\n        id: 'silverado',\n        make: 'chevrolet',\n        model: 'Silverado'\n      }, {\n        id: 'suburban',\n        make: 'chevrolet',\n        model: 'Suburban'\n      }, {\n        id: 'tahoe',\n        make: 'chevrolet',\n        model: 'Tahoe'\n      }, {\n        id: 'trail-blazer',\n        make: 'chevrolet',\n        model: 'TrailBlazer'\n      }],\n      optgroups: [{\n        $order: 3,\n        id: 'dodge',\n        name: 'Dodge'\n      }, {\n        $order: 2,\n        id: 'audi',\n        name: 'Audi'\n      }, {\n        $order: 1,\n        id: 'chevrolet',\n        name: 'Chevrolet'\n      }],\n      labelField: 'model',\n      valueField: 'id',\n      optgroupField: 'make',\n      optgroupLabelField: 'name',\n      optgroupValueField: 'id',\n      lockOptgroupOrder: true,\n      searchField: ['model'],\n      plugins: ['optgroup_columns'],\n      openOnFocus: false\n    });\n    $('.selectize-close-btn').selectize({\n      plugins: ['remove_button'],\n      persist: false,\n      create: true,\n      render: {\n        item: function item(data, escape) {\n          return '<div>\"' + escape(data.text) + '\"</div>';\n        }\n      },\n      onDelete: function onDelete(values) {\n        return confirm(values.length > 1 ? 'Are you sure you want to remove these ' + values.length + ' items?' : 'Are you sure you want to remove \"' + values[0] + '\"?');\n      }\n    });\n    $('.selectize-drop-header').selectize({\n      sortField: 'text',\n      hideSelected: false,\n      plugins: {\n        'dropdown_header': {\n          title: 'Language'\n        }\n      }\n    });\n  }, //initializing Slimscroll\n  FormAdvanced.prototype.initSwitchery = function () {\n    $('[data-plugin=\"switchery\"]').each(function (idx, obj) {\n      new Switchery($(this)[0], $(this).data());\n    });\n  }, //initializing form validation\n  FormAdvanced.prototype.initMultiSelect = function () {\n    if ($('[data-plugin=\"multiselect\"]').length > 0) $('[data-plugin=\"multiselect\"]').multiSelect($(this).data());\n  }, // touchspin\n  FormAdvanced.prototype.initTouchspin = function () {\n    var defaultOptions = {}; // touchspin\n\n    $('[data-toggle=\"touchspin\"]').each(function (idx, obj) {\n      var objOptions = $.extend({}, defaultOptions, $(obj).data());\n      $(obj).TouchSpin(objOptions);\n    });\n  }, //initilizing\n  FormAdvanced.prototype.init = function () {\n    var $this = this;\n    this.initSelect2(), this.initMaxLength(), this.initSelectize(), this.initSwitchery(), this.initMultiSelect(), this.initTouchspin();\n  }, $.FormAdvanced = new FormAdvanced(), $.FormAdvanced.Constructor = FormAdvanced;\n}(window.jQuery), //initializing main application module\nfunction ($) {\n  \"use strict\";\n\n  $.FormAdvanced.init();\n}(window.jQuery); // Auto complete\n\n/*jslint  browser: true, white: true, plusplus: true */\n\n/*global $, countries */\n\n$(function () {\n  'use strict';\n\n  var countriesArray = $.map(countries, function (value, key) {\n    return {\n      value: value,\n      data: key\n    };\n  }); // Setup jQuery ajax mock:\n\n  $.mockjax({\n    url: '*',\n    responseTime: 2000,\n    response: function response(settings) {\n      var query = settings.data.query,\n          queryLowerCase = query.toLowerCase(),\n          re = new RegExp('\\\\b' + $.Autocomplete.utils.escapeRegExChars(queryLowerCase), 'gi'),\n          suggestions = $.grep(countriesArray, function (country) {\n        // return country.value.toLowerCase().indexOf(queryLowerCase) === 0;\n        return re.test(country.value);\n      }),\n          response = {\n        query: query,\n        suggestions: suggestions\n      };\n      this.responseText = JSON.stringify(response);\n    }\n  }); // Initialize ajax autocomplete:\n\n  $('#autocomplete-ajax').autocomplete({\n    // serviceUrl: '/autosuggest/service/url',\n    lookup: countriesArray,\n    lookupFilter: function lookupFilter(suggestion, originalQuery, queryLowerCase) {\n      var re = new RegExp('\\\\b' + $.Autocomplete.utils.escapeRegExChars(queryLowerCase), 'gi');\n      return re.test(suggestion.value);\n    },\n    onSelect: function onSelect(suggestion) {\n      $('#selction-ajax').html('You selected: ' + suggestion.value + ', ' + suggestion.data);\n    },\n    onHint: function onHint(hint) {\n      $('#autocomplete-ajax-x').val(hint);\n    },\n    onInvalidateSelection: function onInvalidateSelection() {\n      $('#selction-ajax').html('You selected: none');\n    }\n  });\n  var nhlTeams = ['Anaheim Ducks', 'Atlanta Thrashers', 'Boston Bruins', 'Buffalo Sabres', 'Calgary Flames', 'Carolina Hurricanes', 'Chicago Blackhawks', 'Colorado Avalanche', 'Columbus Blue Jackets', 'Dallas Stars', 'Detroit Red Wings', 'Edmonton OIlers', 'Florida Panthers', 'Los Angeles Kings', 'Minnesota Wild', 'Montreal Canadiens', 'Nashville Predators', 'New Jersey Devils', 'New Rork Islanders', 'New York Rangers', 'Ottawa Senators', 'Philadelphia Flyers', 'Phoenix Coyotes', 'Pittsburgh Penguins', 'Saint Louis Blues', 'San Jose Sharks', 'Tampa Bay Lightning', 'Toronto Maple Leafs', 'Vancouver Canucks', 'Washington Capitals'];\n  var nbaTeams = ['Atlanta Hawks', 'Boston Celtics', 'Charlotte Bobcats', 'Chicago Bulls', 'Cleveland Cavaliers', 'Dallas Mavericks', 'Denver Nuggets', 'Detroit Pistons', 'Golden State Warriors', 'Houston Rockets', 'Indiana Pacers', 'LA Clippers', 'LA Lakers', 'Memphis Grizzlies', 'Miami Heat', 'Milwaukee Bucks', 'Minnesota Timberwolves', 'New Jersey Nets', 'New Orleans Hornets', 'New York Knicks', 'Oklahoma City Thunder', 'Orlando Magic', 'Philadelphia Sixers', 'Phoenix Suns', 'Portland Trail Blazers', 'Sacramento Kings', 'San Antonio Spurs', 'Toronto Raptors', 'Utah Jazz', 'Washington Wizards'];\n  var nhl = $.map(nhlTeams, function (team) {\n    return {\n      value: team,\n      data: {\n        category: 'NHL'\n      }\n    };\n  });\n  var nba = $.map(nbaTeams, function (team) {\n    return {\n      value: team,\n      data: {\n        category: 'NBA'\n      }\n    };\n  });\n  var teams = nhl.concat(nba); // Initialize autocomplete with local lookup:\n\n  $('#autocomplete').devbridgeAutocomplete({\n    lookup: teams,\n    minChars: 1,\n    onSelect: function onSelect(suggestion) {\n      $('#selection').html('You selected: ' + suggestion.value + ', ' + suggestion.data.category);\n    },\n    showNoSuggestionNotice: true,\n    noSuggestionNotice: 'Sorry, no matching results',\n    groupBy: 'category'\n  }); // Initialize autocomplete with custom appendTo:\n\n  $('#autocomplete-custom-append').autocomplete({\n    lookup: countriesArray,\n    appendTo: '#suggestions-container'\n  }); // Initialize autocomplete with custom appendTo:\n\n  $('#autocomplete-dynamic').autocomplete({\n    lookup: countriesArray\n  });\n});\nvar countries = {\n  \"AD\": \"Andorra\",\n  \"A2\": \"Andorra Test\",\n  \"AE\": \"United Arab Emirates\",\n  \"AF\": \"Afghanistan\",\n  \"AG\": \"Antigua and Barbuda\",\n  \"AI\": \"Anguilla\",\n  \"AL\": \"Albania\",\n  \"AM\": \"Armenia\",\n  \"AN\": \"Netherlands Antilles\",\n  \"AO\": \"Angola\",\n  \"AQ\": \"Antarctica\",\n  \"AR\": \"Argentina\",\n  \"AS\": \"American Samoa\",\n  \"AT\": \"Austria\",\n  \"AU\": \"Australia\",\n  \"AW\": \"Aruba\",\n  \"AX\": \"\\xC5land Islands\",\n  \"AZ\": \"Azerbaijan\",\n  \"BA\": \"Bosnia and Herzegovina\",\n  \"BB\": \"Barbados\",\n  \"BD\": \"Bangladesh\",\n  \"BE\": \"Belgium\",\n  \"BF\": \"Burkina Faso\",\n  \"BG\": \"Bulgaria\",\n  \"BH\": \"Bahrain\",\n  \"BI\": \"Burundi\",\n  \"BJ\": \"Benin\",\n  \"BL\": \"Saint Barth\\xE9lemy\",\n  \"BM\": \"Bermuda\",\n  \"BN\": \"Brunei\",\n  \"BO\": \"Bolivia\",\n  \"BQ\": \"British Antarctic Territory\",\n  \"BR\": \"Brazil\",\n  \"BS\": \"Bahamas\",\n  \"BT\": \"Bhutan\",\n  \"BV\": \"Bouvet Island\",\n  \"BW\": \"Botswana\",\n  \"BY\": \"Belarus\",\n  \"BZ\": \"Belize\",\n  \"CA\": \"Canada\",\n  \"CC\": \"Cocos [Keeling] Islands\",\n  \"CD\": \"Congo - Kinshasa\",\n  \"CF\": \"Central African Republic\",\n  \"CG\": \"Congo - Brazzaville\",\n  \"CH\": \"Switzerland\",\n  \"CI\": \"C\\xF4te d\\u2019Ivoire\",\n  \"CK\": \"Cook Islands\",\n  \"CL\": \"Chile\",\n  \"CM\": \"Cameroon\",\n  \"CN\": \"China\",\n  \"CO\": \"Colombia\",\n  \"CR\": \"Costa Rica\",\n  \"CS\": \"Serbia and Montenegro\",\n  \"CT\": \"Canton and Enderbury Islands\",\n  \"CU\": \"Cuba\",\n  \"CV\": \"Cape Verde\",\n  \"CX\": \"Christmas Island\",\n  \"CY\": \"Cyprus\",\n  \"CZ\": \"Czech Republic\",\n  \"DD\": \"East Germany\",\n  \"DE\": \"Germany\",\n  \"DJ\": \"Djibouti\",\n  \"DK\": \"Denmark\",\n  \"DM\": \"Dominica\",\n  \"DO\": \"Dominican Republic\",\n  \"DZ\": \"Algeria\",\n  \"EC\": \"Ecuador\",\n  \"EE\": \"Estonia\",\n  \"EG\": \"Egypt\",\n  \"EH\": \"Western Sahara\",\n  \"ER\": \"Eritrea\",\n  \"ES\": \"Spain\",\n  \"ET\": \"Ethiopia\",\n  \"FI\": \"Finland\",\n  \"FJ\": \"Fiji\",\n  \"FK\": \"Falkland Islands\",\n  \"FM\": \"Micronesia\",\n  \"FO\": \"Faroe Islands\",\n  \"FQ\": \"French Southern and Antarctic Territories\",\n  \"FR\": \"France\",\n  \"FX\": \"Metropolitan France\",\n  \"GA\": \"Gabon\",\n  \"GB\": \"United Kingdom\",\n  \"GD\": \"Grenada\",\n  \"GE\": \"Georgia\",\n  \"GF\": \"French Guiana\",\n  \"GG\": \"Guernsey\",\n  \"GH\": \"Ghana\",\n  \"GI\": \"Gibraltar\",\n  \"GL\": \"Greenland\",\n  \"GM\": \"Gambia\",\n  \"GN\": \"Guinea\",\n  \"GP\": \"Guadeloupe\",\n  \"GQ\": \"Equatorial Guinea\",\n  \"GR\": \"Greece\",\n  \"GS\": \"South Georgia and the South Sandwich Islands\",\n  \"GT\": \"Guatemala\",\n  \"GU\": \"Guam\",\n  \"GW\": \"Guinea-Bissau\",\n  \"GY\": \"Guyana\",\n  \"HK\": \"Hong Kong SAR China\",\n  \"HM\": \"Heard Island and McDonald Islands\",\n  \"HN\": \"Honduras\",\n  \"HR\": \"Croatia\",\n  \"HT\": \"Haiti\",\n  \"HU\": \"Hungary\",\n  \"ID\": \"Indonesia\",\n  \"IE\": \"Ireland\",\n  \"IL\": \"Israel\",\n  \"IM\": \"Isle of Man\",\n  \"IN\": \"India\",\n  \"IO\": \"British Indian Ocean Territory\",\n  \"IQ\": \"Iraq\",\n  \"IR\": \"Iran\",\n  \"IS\": \"Iceland\",\n  \"IT\": \"Italy\",\n  \"JE\": \"Jersey\",\n  \"JM\": \"Jamaica\",\n  \"JO\": \"Jordan\",\n  \"JP\": \"Japan\",\n  \"JT\": \"Johnston Island\",\n  \"KE\": \"Kenya\",\n  \"KG\": \"Kyrgyzstan\",\n  \"KH\": \"Cambodia\",\n  \"KI\": \"Kiribati\",\n  \"KM\": \"Comoros\",\n  \"KN\": \"Saint Kitts and Nevis\",\n  \"KP\": \"North Korea\",\n  \"KR\": \"South Korea\",\n  \"KW\": \"Kuwait\",\n  \"KY\": \"Cayman Islands\",\n  \"KZ\": \"Kazakhstan\",\n  \"LA\": \"Laos\",\n  \"LB\": \"Lebanon\",\n  \"LC\": \"Saint Lucia\",\n  \"LI\": \"Liechtenstein\",\n  \"LK\": \"Sri Lanka\",\n  \"LR\": \"Liberia\",\n  \"LS\": \"Lesotho\",\n  \"LT\": \"Lithuania\",\n  \"LU\": \"Luxembourg\",\n  \"LV\": \"Latvia\",\n  \"LY\": \"Libya\",\n  \"MA\": \"Morocco\",\n  \"MC\": \"Monaco\",\n  \"MD\": \"Moldova\",\n  \"ME\": \"Montenegro\",\n  \"MF\": \"Saint Martin\",\n  \"MG\": \"Madagascar\",\n  \"MH\": \"Marshall Islands\",\n  \"MI\": \"Midway Islands\",\n  \"MK\": \"Macedonia\",\n  \"ML\": \"Mali\",\n  \"MM\": \"Myanmar [Burma]\",\n  \"MN\": \"Mongolia\",\n  \"MO\": \"Macau SAR China\",\n  \"MP\": \"Northern Mariana Islands\",\n  \"MQ\": \"Martinique\",\n  \"MR\": \"Mauritania\",\n  \"MS\": \"Montserrat\",\n  \"MT\": \"Malta\",\n  \"MU\": \"Mauritius\",\n  \"MV\": \"Maldives\",\n  \"MW\": \"Malawi\",\n  \"MX\": \"Mexico\",\n  \"MY\": \"Malaysia\",\n  \"MZ\": \"Mozambique\",\n  \"NA\": \"Namibia\",\n  \"NC\": \"New Caledonia\",\n  \"NE\": \"Niger\",\n  \"NF\": \"Norfolk Island\",\n  \"NG\": \"Nigeria\",\n  \"NI\": \"Nicaragua\",\n  \"NL\": \"Netherlands\",\n  \"NO\": \"Norway\",\n  \"NP\": \"Nepal\",\n  \"NQ\": \"Dronning Maud Land\",\n  \"NR\": \"Nauru\",\n  \"NT\": \"Neutral Zone\",\n  \"NU\": \"Niue\",\n  \"NZ\": \"New Zealand\",\n  \"OM\": \"Oman\",\n  \"PA\": \"Panama\",\n  \"PC\": \"Pacific Islands Trust Territory\",\n  \"PE\": \"Peru\",\n  \"PF\": \"French Polynesia\",\n  \"PG\": \"Papua New Guinea\",\n  \"PH\": \"Philippines\",\n  \"PK\": \"Pakistan\",\n  \"PL\": \"Poland\",\n  \"PM\": \"Saint Pierre and Miquelon\",\n  \"PN\": \"Pitcairn Islands\",\n  \"PR\": \"Puerto Rico\",\n  \"PS\": \"Palestinian Territories\",\n  \"PT\": \"Portugal\",\n  \"PU\": \"U.S. Miscellaneous Pacific Islands\",\n  \"PW\": \"Palau\",\n  \"PY\": \"Paraguay\",\n  \"PZ\": \"Panama Canal Zone\",\n  \"QA\": \"Qatar\",\n  \"RE\": \"R\\xE9union\",\n  \"RO\": \"Romania\",\n  \"RS\": \"Serbia\",\n  \"RU\": \"Russia\",\n  \"RW\": \"Rwanda\",\n  \"SA\": \"Saudi Arabia\",\n  \"SB\": \"Solomon Islands\",\n  \"SC\": \"Seychelles\",\n  \"SD\": \"Sudan\",\n  \"SE\": \"Sweden\",\n  \"SG\": \"Singapore\",\n  \"SH\": \"Saint Helena\",\n  \"SI\": \"Slovenia\",\n  \"SJ\": \"Svalbard and Jan Mayen\",\n  \"SK\": \"Slovakia\",\n  \"SL\": \"Sierra Leone\",\n  \"SM\": \"San Marino\",\n  \"SN\": \"Senegal\",\n  \"SO\": \"Somalia\",\n  \"SR\": \"Suriname\",\n  \"ST\": \"S\\xE3o Tom\\xE9 and Pr\\xEDncipe\",\n  \"SU\": \"Union of Soviet Socialist Republics\",\n  \"SV\": \"El Salvador\",\n  \"SY\": \"Syria\",\n  \"SZ\": \"Swaziland\",\n  \"TC\": \"Turks and Caicos Islands\",\n  \"TD\": \"Chad\",\n  \"TF\": \"French Southern Territories\",\n  \"TG\": \"Togo\",\n  \"TH\": \"Thailand\",\n  \"TJ\": \"Tajikistan\",\n  \"TK\": \"Tokelau\",\n  \"TL\": \"Timor-Leste\",\n  \"TM\": \"Turkmenistan\",\n  \"TN\": \"Tunisia\",\n  \"TO\": \"Tonga\",\n  \"TR\": \"Turkey\",\n  \"TT\": \"Trinidad and Tobago\",\n  \"TV\": \"Tuvalu\",\n  \"TW\": \"Taiwan\",\n  \"TZ\": \"Tanzania\",\n  \"UA\": \"Ukraine\",\n  \"UG\": \"Uganda\",\n  \"UM\": \"U.S. Minor Outlying Islands\",\n  \"US\": \"United States\",\n  \"UY\": \"Uruguay\",\n  \"UZ\": \"Uzbekistan\",\n  \"VA\": \"Vatican City\",\n  \"VC\": \"Saint Vincent and the Grenadines\",\n  \"VD\": \"North Vietnam\",\n  \"VE\": \"Venezuela\",\n  \"VG\": \"British Virgin Islands\",\n  \"VI\": \"U.S. Virgin Islands\",\n  \"VN\": \"Vietnam\",\n  \"VU\": \"Vanuatu\",\n  \"WF\": \"Wallis and Futuna\",\n  \"WK\": \"Wake Island\",\n  \"WS\": \"Samoa\",\n  \"YD\": \"People's Democratic Republic of Yemen\",\n  \"YE\": \"Yemen\",\n  \"YT\": \"Mayotte\",\n  \"ZA\": \"South Africa\",\n  \"ZM\": \"Zambia\",\n  \"ZW\": \"Zimbabwe\",\n  \"ZZ\": \"Unknown or Invalid Region\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/pages/form-advanced.init.js\n");

/***/ }),

/***/ 24:
/*!********************************************************!*\
  !*** multi ./resources/js/pages/form-advanced.init.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/nikhil/workspace/themes/Ubold/ubold/laravel/laravel/resources/js/pages/form-advanced.init.js */"./resources/js/pages/form-advanced.init.js");


/***/ })

/******/ });